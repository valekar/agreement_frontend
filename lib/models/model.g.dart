// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Picture.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Picture TABLE
class TablePicture extends SqfEntityTableBase {
  TablePicture() {
    // declare properties of EntityTable
    tableName = 'picture';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('picture', DbType.blob),
      SqfEntityFieldBase('createdAt', DbType.integer),
      SqfEntityFieldBase('updatedAt', DbType.integer),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: true),
      SqfEntityFieldRelationshipBase(
          TableFolder.getInstance, DeleteRule.CASCADE,
          defaultValue: 0, fieldName: 'folderId'),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TablePicture();
  }
}

// Folder TABLE
class TableFolder extends SqfEntityTableBase {
  TableFolder() {
    // declare properties of EntityTable
    tableName = 'folder';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('picture', DbType.blob),
      SqfEntityFieldBase('createdAt', DbType.integer),
      SqfEntityFieldBase('updatedAt', DbType.integer),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableFolder();
  }
}

// User TABLE
class TableUser extends SqfEntityTableBase {
  TableUser() {
    // declare properties of EntityTable
    tableName = 'user';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('firstName', DbType.text),
      SqfEntityFieldBase('lastName', DbType.text),
      SqfEntityFieldBase('email', DbType.text),
      SqfEntityFieldBase('password', DbType.text),
      SqfEntityFieldBase('private_key', DbType.text),
      SqfEntityFieldBase('public_key', DbType.text),
      SqfEntityFieldBase('profileUrl', DbType.text),
      SqfEntityFieldBase('isActive', DbType.bool, defaultValue: true),
      SqfEntityFieldBase('createdAt', DbType.integer),
      SqfEntityFieldBase('updatedAt', DbType.integer),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUser();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class AgreementModel extends SqfEntityModelProvider {
  AgreementModel() {
    databaseName = agreementModel.databaseName;
    databaseTables = [
      TablePicture.getInstance,
      TableFolder.getInstance,
      TableUser.getInstance,
    ];

    bundledDatabasePath = agreementModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Picture
class Picture {
  Picture(
      {this.id,
      this.title,
      this.picture,
      this.createdAt,
      this.updatedAt,
      this.isActive,
      this.folderId,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Picture.withFields(this.title, this.picture, this.createdAt, this.updatedAt,
      this.isActive, this.folderId, this.isDeleted) {
    _setDefaultValues();
  }
  Picture.withId(this.id, this.title, this.picture, this.createdAt,
      this.updatedAt, this.isActive, this.folderId, this.isDeleted) {
    _setDefaultValues();
  }
  Picture.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    id = o['id'] as int;
    if (o['title'] != null) title = o['title'] as String;
    if (o['picture'] != null) picture = o['picture'] as Uint8List;
    if (o['createdAt'] != null) createdAt = o['createdAt'] as int;
    if (o['updatedAt'] != null) updatedAt = o['updatedAt'] as int;
    if (o['isActive'] != null)
      isActive = o['isActive'] == 1 || o['isActive'] == true;
    folderId = o['folderId'] as int;

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plFolder = o['Folder'] != null
        ? Folder.fromMap(o['Folder'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Picture)
  int id;
  String title;
  Uint8List picture;
  int createdAt;
  int updatedAt;
  bool isActive;
  int folderId;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Picture)

// RELATIONSHIPS (Picture)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  Folder plFolder;

  /// get Folder By FolderId
  Future<Folder> getFolder() async {
    final _obj = await Folder().getById(folderId);
    return _obj;
  }
  // END RELATIONSHIPS (Picture)

  static const bool _softDeleteActivated = true;
  PictureManager __mnPicture;

  PictureManager get _mnPicture {
    return __mnPicture = __mnPicture ?? PictureManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (title != null) {
      map['title'] = title;
    }

    if (picture != null) {
      map['picture'] = picture;
    }

    if (createdAt != null) {
      map['createdAt'] = createdAt;
    }

    if (updatedAt != null) {
      map['updatedAt'] = updatedAt;
    }

    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive ? 1 : 0) : isActive;
    }

    if (folderId != null) {
      map['folderId'] = folderId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (title != null) {
      map['title'] = title;
    }

    if (picture != null) {
      map['picture'] = picture;
    }

    if (createdAt != null) {
      map['createdAt'] = createdAt;
    }

    if (updatedAt != null) {
      map['updatedAt'] = updatedAt;
    }

    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive ? 1 : 0) : isActive;
    }

    if (folderId != null) {
      map['folderId'] = folderId;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      title,
      picture,
      createdAt,
      updatedAt,
      isActive,
      folderId,
      isDeleted
    ];
  }

  static Future<List<Picture>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print(
          'SQFENTITY ERROR Picture.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Picture>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Picture>[];
    try {
      objList = list
          .map((picture) => Picture.fromMap(picture as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Picture.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<Picture>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await Picture.fromMapList(data);
    } 
    */

  static Future<List<Picture>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields}) async {
    final List<Picture> objList = <Picture>[];
    for (final map in data) {
      final obj = Picture.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plFolder')) {
          obj.plFolder = obj.plFolder ?? await obj.getFolder();
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Picture by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Picture if exist, otherwise returns null
  Future<Picture> getById(int id) async {
    if (id == null) {
      return null;
    }
    Picture obj;
    final data = await _mnPicture.getById(id);
    if (data.length != 0) {
      obj = Picture.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Picture) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnPicture.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs Picture. Returns a new Primary Key value of Picture

  /// <returns>Returns a new Primary Key value of Picture
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Picture> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Picture> pictures) async {
    final results = _mnPicture.saveAll(
        'INSERT OR REPLACE INTO picture (id,  title, picture, createdAt, updatedAt, isActive, folderId,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
        pictures);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      if (await _mnPicture.rawInsert(
              'INSERT OR REPLACE INTO picture (id,  title, picture, createdAt, updatedAt, isActive, folderId,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
              [
                id,
                title,
                picture,
                createdAt,
                updatedAt,
                isActive,
                folderId,
                isDeleted
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Picture id=$id updated successfuly');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Picture id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Picture Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Picture>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Picture> pictures) async {
    final results = await _mnPicture.rawInsertAll(
        'INSERT OR REPLACE INTO picture (id,  title, picture, createdAt, updatedAt, isActive, folderId,isDeleted)  VALUES (?,?,?,?,?,?,?,?)',
        pictures);
    return results;
  }

  /// Deletes Picture

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Picture invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnPicture
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnPicture.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Picture>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Picture invoked (id=$id)');
    {
      return _mnPicture.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private PictureFilterBuilder _Select;
  PictureFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return PictureFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  PictureFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return PictureFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isActive = isActive ?? true;
    folderId = folderId ?? 0;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion picture

// region PictureField
class PictureField extends SearchCriteria {
  PictureField(this.pictureFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  PictureFilterBuilder pictureFB;

  PictureField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  PictureFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    pictureFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pictureFB.parameters, param, SqlSyntax.EQuals,
            pictureFB._addedBlocks)
        : setCriteria(pValue, pictureFB.parameters, param, SqlSyntax.NotEQuals,
            pictureFB._addedBlocks);
    _waitingNot = '';
    pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
        pictureFB._addedBlocks.retVal;
    return pictureFB;
  }

  PictureFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    pictureFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pictureFB.parameters, param,
            SqlSyntax.EQualsOrNull, pictureFB._addedBlocks)
        : setCriteria(pValue, pictureFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, pictureFB._addedBlocks);
    _waitingNot = '';
    pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
        pictureFB._addedBlocks.retVal;
    return pictureFB;
  }

  PictureFilterBuilder isNull() {
    pictureFB._addedBlocks = setCriteria(
        0,
        pictureFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        pictureFB._addedBlocks);
    _waitingNot = '';
    pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
        pictureFB._addedBlocks.retVal;
    return pictureFB;
  }

  PictureFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      pictureFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          pictureFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          pictureFB._addedBlocks);
      _waitingNot = '';
      pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
          pictureFB._addedBlocks.retVal;
    }
    return pictureFB;
  }

  PictureFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      pictureFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          pictureFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          pictureFB._addedBlocks);
      _waitingNot = '';
      pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
          pictureFB._addedBlocks.retVal;
      pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
          pictureFB._addedBlocks.retVal;
    }
    return pictureFB;
  }

  PictureFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      pictureFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          pictureFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          pictureFB._addedBlocks);
      _waitingNot = '';
      pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
          pictureFB._addedBlocks.retVal;
    }
    return pictureFB;
  }

  PictureFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      pictureFB._addedBlocks = setCriteria(
          pFirst,
          pictureFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          pictureFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        pictureFB._addedBlocks = setCriteria(pFirst, pictureFB.parameters,
            param, SqlSyntax.LessThan, pictureFB._addedBlocks);
      } else {
        pictureFB._addedBlocks = setCriteria(pFirst, pictureFB.parameters,
            param, SqlSyntax.GreaterThanOrEquals, pictureFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        pictureFB._addedBlocks = setCriteria(pLast, pictureFB.parameters, param,
            SqlSyntax.GreaterThan, pictureFB._addedBlocks);
      } else {
        pictureFB._addedBlocks = setCriteria(pLast, pictureFB.parameters, param,
            SqlSyntax.LessThanOrEquals, pictureFB._addedBlocks);
      }
    }
    _waitingNot = '';
    pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
        pictureFB._addedBlocks.retVal;
    return pictureFB;
  }

  PictureFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    pictureFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pictureFB.parameters, param,
            SqlSyntax.GreaterThan, pictureFB._addedBlocks)
        : setCriteria(pValue, pictureFB.parameters, param,
            SqlSyntax.LessThanOrEquals, pictureFB._addedBlocks);
    _waitingNot = '';
    pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
        pictureFB._addedBlocks.retVal;
    return pictureFB;
  }

  PictureFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    pictureFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pictureFB.parameters, param, SqlSyntax.LessThan,
            pictureFB._addedBlocks)
        : setCriteria(pValue, pictureFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, pictureFB._addedBlocks);
    _waitingNot = '';
    pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
        pictureFB._addedBlocks.retVal;
    return pictureFB;
  }

  PictureFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    pictureFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pictureFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, pictureFB._addedBlocks)
        : setCriteria(pValue, pictureFB.parameters, param, SqlSyntax.LessThan,
            pictureFB._addedBlocks);
    _waitingNot = '';
    pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
        pictureFB._addedBlocks.retVal;
    return pictureFB;
  }

  PictureFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    pictureFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, pictureFB.parameters, param,
            SqlSyntax.LessThanOrEquals, pictureFB._addedBlocks)
        : setCriteria(pValue, pictureFB.parameters, param,
            SqlSyntax.GreaterThan, pictureFB._addedBlocks);
    _waitingNot = '';
    pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
        pictureFB._addedBlocks.retVal;
    return pictureFB;
  }

  PictureFilterBuilder inValues(dynamic pValue) {
    pictureFB._addedBlocks = setCriteria(
        pValue,
        pictureFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        pictureFB._addedBlocks);
    _waitingNot = '';
    pictureFB._addedBlocks.needEndBlock[pictureFB._blockIndex] =
        pictureFB._addedBlocks.retVal;
    return pictureFB;
  }
}
// endregion PictureField

// region PictureFilterBuilder
class PictureFilterBuilder extends SearchCriteria {
  PictureFilterBuilder(Picture obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Picture _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  PictureFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  PictureFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  PictureFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  PictureFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  PictureFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  PictureFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  PictureFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  PictureFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PictureFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  PictureFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  PictureField setField(PictureField field, String colName, DbType dbtype) {
    return PictureField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  PictureField _id;
  PictureField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  PictureField _title;
  PictureField get title {
    return _title = setField(_title, 'title', DbType.text);
  }

  PictureField _picture;
  PictureField get picture {
    return _picture = setField(_picture, 'picture', DbType.blob);
  }

  PictureField _createdAt;
  PictureField get createdAt {
    return _createdAt = setField(_createdAt, 'createdAt', DbType.integer);
  }

  PictureField _updatedAt;
  PictureField get updatedAt {
    return _updatedAt = setField(_updatedAt, 'updatedAt', DbType.integer);
  }

  PictureField _isActive;
  PictureField get isActive {
    return _isActive = setField(_isActive, 'isActive', DbType.bool);
  }

  PictureField _folderId;
  PictureField get folderId {
    return _folderId = setField(_folderId, 'folderId', DbType.integer);
  }

  PictureField _isDeleted;
  PictureField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Picture._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Picture> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Picture._softDeleteActivated && !hardDelete) {
      r = await _obj._mnPicture.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnPicture.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Picture bulk invoked');
    return _obj._mnPicture.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from picture ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnPicture.updateBatch(qparams, values);
  }

  /// This method always returns PictureObj if exist, otherwise returns null
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Picture>
  Future<Picture> toSingle(
      {bool preload = false, List<String> preloadFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnPicture.toList(qparams);
    final data = await objFuture;
    Picture obj;
    if (data.isNotEmpty) {
      obj = Picture.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plFolder')) {
          obj.plFolder = obj.plFolder ?? await obj.getFolder();
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) pictureCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final picturesFuture = await _obj._mnPicture.toList(qparams);
    final int count = picturesFuture[0]['CNT'] as int;
    if (pictureCount != null) {
      pictureCount(count);
    }
    return count;
  }

  /// This method always returns List<Picture>.
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Picture>
  Future<List<Picture>> toList(
      {bool preload = false, List<String> preloadFields}) async {
    final data = await toMapList();
    final List<Picture> picturesData =
        await Picture.fromMapList(data, preload: preload);
    return picturesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnPicture.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Picture>>
  Future<List<DropdownMenuItem<Picture>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Picture>> o)
          dropDownMenu]) async {
    _buildParameters();
    final picturesFuture = _obj._mnPicture.toList(qparams);

    final data = await picturesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Picture>> items = []..add(DropdownMenuItem(
        value: Picture(),
        child: Text('Select Picture'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Picture.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final picturesFuture = _obj._mnPicture.toList(qparams);

    final data = await picturesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Picture'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnPicture.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback Function(List<dynamic> o) listObject]) async {
    _buildParameters();

    final objectFuture = _obj._mnPicture.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Picture.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnPicture.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion PictureFilterBuilder

// region PictureFields
class PictureFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField _fPicture;
  static TableField get picture {
    return _fPicture =
        _fPicture ?? SqlSyntax.setField(_fPicture, 'picture', DbType.blob);
  }

  static TableField _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.integer);
  }

  static TableField _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.integer);
  }

  static TableField _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField _fFolderId;
  static TableField get folderId {
    return _fFolderId = _fFolderId ??
        SqlSyntax.setField(_fFolderId, 'folderId', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion PictureFields

//region PictureManager
class PictureManager extends SqfEntityProvider {
  PictureManager()
      : super(AgreementModel(), tableName: _tableName, colId: _colId);
  static String _tableName = 'picture';
  static String _colId = 'id';
}

//endregion PictureManager
// region Folder
class Folder {
  Folder(
      {this.id,
      this.title,
      this.picture,
      this.createdAt,
      this.updatedAt,
      this.isDeleted}) {
    _setDefaultValues();
  }
  Folder.withFields(this.title, this.picture, this.createdAt, this.updatedAt,
      this.isDeleted) {
    _setDefaultValues();
  }
  Folder.withId(this.id, this.title, this.picture, this.createdAt,
      this.updatedAt, this.isDeleted) {
    _setDefaultValues();
  }
  Folder.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    id = o['id'] as int;
    if (o['title'] != null) title = o['title'] as String;
    if (o['picture'] != null) picture = o['picture'] as Uint8List;
    if (o['createdAt'] != null) createdAt = o['createdAt'] as int;
    if (o['updatedAt'] != null) updatedAt = o['updatedAt'] as int;
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Folder)
  int id;
  String title;
  Uint8List picture;
  int createdAt;
  int updatedAt;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (Folder)

// COLLECTIONS & VIRTUALS (Folder)
  /// to load children of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true)
  List<Picture> plPictures;

  /// get Picture(s) filtered by folderId=id
  PictureFilterBuilder getPictures(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Picture()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .folderId
        .equals(id)
        .and;
  }
// END COLLECTIONS & VIRTUALS (Folder)

  static const bool _softDeleteActivated = true;
  FolderManager __mnFolder;

  FolderManager get _mnFolder {
    return __mnFolder = __mnFolder ?? FolderManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (title != null) {
      map['title'] = title;
    }

    if (picture != null) {
      map['picture'] = picture;
    }

    if (createdAt != null) {
      map['createdAt'] = createdAt;
    }

    if (updatedAt != null) {
      map['updatedAt'] = updatedAt;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (title != null) {
      map['title'] = title;
    }

    if (picture != null) {
      map['picture'] = picture;
    }

    if (createdAt != null) {
      map['createdAt'] = createdAt;
    }

    if (updatedAt != null) {
      map['updatedAt'] = updatedAt;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Folder)
    if (!forQuery) {
      map['Pictures'] = await getPictures().toMapList();
    }
// END COLLECTIONS (Folder)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [id, title, picture, createdAt, updatedAt, isDeleted];
  }

  static Future<List<Folder>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Folder.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Folder>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Folder>[];
    try {
      objList = list
          .map((folder) => Folder.fromMap(folder as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Folder.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<Folder>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await Folder.fromMapList(data);
    } 
    */

  static Future<List<Folder>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields}) async {
    final List<Folder> objList = <Folder>[];
    for (final map in data) {
      final obj = Folder.fromMap(map as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plPictures')) {
          obj.plPictures = obj.plPictures ?? await obj.getPictures().toList();
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Folder by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Folder if exist, otherwise returns null
  Future<Folder> getById(int id) async {
    if (id == null) {
      return null;
    }
    Folder obj;
    final data = await _mnFolder.getById(id);
    if (data.length != 0) {
      obj = Folder.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Folder) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnFolder.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs Folder. Returns a new Primary Key value of Folder

  /// <returns>Returns a new Primary Key value of Folder
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<Folder> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Folder> folders) async {
    final results = _mnFolder.saveAll(
        'INSERT OR REPLACE INTO folder (id,  title, picture, createdAt, updatedAt,isDeleted)  VALUES (?,?,?,?,?,?)',
        folders);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      if (await _mnFolder.rawInsert(
              'INSERT OR REPLACE INTO folder (id,  title, picture, createdAt, updatedAt,isDeleted)  VALUES (?,?,?,?,?,?)',
              [id, title, picture, createdAt, updatedAt, isDeleted]) ==
          1) {
        saveResult = BoolResult(
            success: true, successMessage: 'Folder id=$id updated successfuly');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Folder id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Folder Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<Folder>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Folder> folders) async {
    final results = await _mnFolder.rawInsertAll(
        'INSERT OR REPLACE INTO folder (id,  title, picture, createdAt, updatedAt,isDeleted)  VALUES (?,?,?,?,?,?)',
        folders);
    return results;
  }

  /// Deletes Folder

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Folder invoked (id=$id)');
    var result = BoolResult();
    {
      result = await Picture().select().folderId.equals(id).delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnFolder
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnFolder.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Folder>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover Folder invoked (id=$id)');
    var result = BoolResult();
    if (recoverChilds) {
      result = await Picture()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .folderId
          .equals(id)
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnFolder.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private FolderFilterBuilder _Select;
  FolderFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return FolderFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  FolderFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return FolderFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion folder

// region FolderField
class FolderField extends SearchCriteria {
  FolderField(this.folderFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  FolderFilterBuilder folderFB;

  FolderField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  FolderFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    folderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, folderFB.parameters, param, SqlSyntax.EQuals,
            folderFB._addedBlocks)
        : setCriteria(pValue, folderFB.parameters, param, SqlSyntax.NotEQuals,
            folderFB._addedBlocks);
    _waitingNot = '';
    folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
        folderFB._addedBlocks.retVal;
    return folderFB;
  }

  FolderFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    folderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, folderFB.parameters, param,
            SqlSyntax.EQualsOrNull, folderFB._addedBlocks)
        : setCriteria(pValue, folderFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, folderFB._addedBlocks);
    _waitingNot = '';
    folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
        folderFB._addedBlocks.retVal;
    return folderFB;
  }

  FolderFilterBuilder isNull() {
    folderFB._addedBlocks = setCriteria(
        0,
        folderFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        folderFB._addedBlocks);
    _waitingNot = '';
    folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
        folderFB._addedBlocks.retVal;
    return folderFB;
  }

  FolderFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      folderFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          folderFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          folderFB._addedBlocks);
      _waitingNot = '';
      folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
          folderFB._addedBlocks.retVal;
    }
    return folderFB;
  }

  FolderFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      folderFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          folderFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          folderFB._addedBlocks);
      _waitingNot = '';
      folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
          folderFB._addedBlocks.retVal;
      folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
          folderFB._addedBlocks.retVal;
    }
    return folderFB;
  }

  FolderFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      folderFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          folderFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          folderFB._addedBlocks);
      _waitingNot = '';
      folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
          folderFB._addedBlocks.retVal;
    }
    return folderFB;
  }

  FolderFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      folderFB._addedBlocks = setCriteria(
          pFirst,
          folderFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          folderFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        folderFB._addedBlocks = setCriteria(pFirst, folderFB.parameters, param,
            SqlSyntax.LessThan, folderFB._addedBlocks);
      } else {
        folderFB._addedBlocks = setCriteria(pFirst, folderFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, folderFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        folderFB._addedBlocks = setCriteria(pLast, folderFB.parameters, param,
            SqlSyntax.GreaterThan, folderFB._addedBlocks);
      } else {
        folderFB._addedBlocks = setCriteria(pLast, folderFB.parameters, param,
            SqlSyntax.LessThanOrEquals, folderFB._addedBlocks);
      }
    }
    _waitingNot = '';
    folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
        folderFB._addedBlocks.retVal;
    return folderFB;
  }

  FolderFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    folderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, folderFB.parameters, param, SqlSyntax.GreaterThan,
            folderFB._addedBlocks)
        : setCriteria(pValue, folderFB.parameters, param,
            SqlSyntax.LessThanOrEquals, folderFB._addedBlocks);
    _waitingNot = '';
    folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
        folderFB._addedBlocks.retVal;
    return folderFB;
  }

  FolderFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    folderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, folderFB.parameters, param, SqlSyntax.LessThan,
            folderFB._addedBlocks)
        : setCriteria(pValue, folderFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, folderFB._addedBlocks);
    _waitingNot = '';
    folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
        folderFB._addedBlocks.retVal;
    return folderFB;
  }

  FolderFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    folderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, folderFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, folderFB._addedBlocks)
        : setCriteria(pValue, folderFB.parameters, param, SqlSyntax.LessThan,
            folderFB._addedBlocks);
    _waitingNot = '';
    folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
        folderFB._addedBlocks.retVal;
    return folderFB;
  }

  FolderFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    folderFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, folderFB.parameters, param,
            SqlSyntax.LessThanOrEquals, folderFB._addedBlocks)
        : setCriteria(pValue, folderFB.parameters, param, SqlSyntax.GreaterThan,
            folderFB._addedBlocks);
    _waitingNot = '';
    folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
        folderFB._addedBlocks.retVal;
    return folderFB;
  }

  FolderFilterBuilder inValues(dynamic pValue) {
    folderFB._addedBlocks = setCriteria(
        pValue,
        folderFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        folderFB._addedBlocks);
    _waitingNot = '';
    folderFB._addedBlocks.needEndBlock[folderFB._blockIndex] =
        folderFB._addedBlocks.retVal;
    return folderFB;
  }
}
// endregion FolderField

// region FolderFilterBuilder
class FolderFilterBuilder extends SearchCriteria {
  FolderFilterBuilder(Folder obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Folder _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  FolderFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  FolderFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  FolderFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  FolderFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  FolderFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  FolderFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  FolderFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  FolderFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  FolderFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  FolderFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  FolderField setField(FolderField field, String colName, DbType dbtype) {
    return FolderField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  FolderField _id;
  FolderField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  FolderField _title;
  FolderField get title {
    return _title = setField(_title, 'title', DbType.text);
  }

  FolderField _picture;
  FolderField get picture {
    return _picture = setField(_picture, 'picture', DbType.blob);
  }

  FolderField _createdAt;
  FolderField get createdAt {
    return _createdAt = setField(_createdAt, 'createdAt', DbType.integer);
  }

  FolderField _updatedAt;
  FolderField get updatedAt {
    return _updatedAt = setField(_updatedAt, 'updatedAt', DbType.integer);
  }

  FolderField _isDeleted;
  FolderField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Folder._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Folder> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    final pictureByfolderIdidList = await toListPrimaryKey(false);
    await Picture()
        .select()
        .folderId
        .inValues(pictureByfolderIdidList)
        .delete(hardDelete);

    if (Folder._softDeleteActivated && !hardDelete) {
      r = await _obj._mnFolder.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnFolder.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover Folder bulk invoked');
    final pictureByfolderIdidList = await toListPrimaryKey(false);
    await Picture()
        .select(getIsDeleted: true)
        .isDeleted
        .equals(true)
        .and
        .folderId
        .inValues(pictureByfolderIdidList)
        .update({'isDeleted': 0});
    return _obj._mnFolder.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from folder ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnFolder.updateBatch(qparams, values);
  }

  /// This method always returns FolderObj if exist, otherwise returns null
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Folder>
  Future<Folder> toSingle(
      {bool preload = false, List<String> preloadFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnFolder.toList(qparams);
    final data = await objFuture;
    Folder obj;
    if (data.isNotEmpty) {
      obj = Folder.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload) {
        if (preloadFields == null || preloadFields.contains('plPictures')) {
          obj.plPictures = obj.plPictures ?? await obj.getPictures().toList();
        }
      } // END RELATIONSHIPS PRELOAD

    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) folderCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final foldersFuture = await _obj._mnFolder.toList(qparams);
    final int count = foldersFuture[0]['CNT'] as int;
    if (folderCount != null) {
      folderCount(count);
    }
    return count;
  }

  /// This method always returns List<Folder>.
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<Folder>
  Future<List<Folder>> toList(
      {bool preload = false, List<String> preloadFields}) async {
    final data = await toMapList();
    final List<Folder> foldersData =
        await Folder.fromMapList(data, preload: preload);
    return foldersData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnFolder.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Folder>>
  Future<List<DropdownMenuItem<Folder>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<Folder>> o)
          dropDownMenu]) async {
    _buildParameters();
    final foldersFuture = _obj._mnFolder.toList(qparams);

    final data = await foldersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Folder>> items = []..add(DropdownMenuItem(
        value: Folder(),
        child: Text('Select Folder'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Folder.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final foldersFuture = _obj._mnFolder.toList(qparams);

    final data = await foldersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Folder'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnFolder.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback Function(List<dynamic> o) listObject]) async {
    _buildParameters();

    final objectFuture = _obj._mnFolder.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Folder.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnFolder.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion FolderFilterBuilder

// region FolderFields
class FolderFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField _fPicture;
  static TableField get picture {
    return _fPicture =
        _fPicture ?? SqlSyntax.setField(_fPicture, 'picture', DbType.blob);
  }

  static TableField _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.integer);
  }

  static TableField _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion FolderFields

//region FolderManager
class FolderManager extends SqfEntityProvider {
  FolderManager()
      : super(AgreementModel(), tableName: _tableName, colId: _colId);
  static String _tableName = 'folder';
  static String _colId = 'id';
}

//endregion FolderManager
// region User
class User {
  User(
      {this.id,
      this.firstName,
      this.lastName,
      this.email,
      this.password,
      this.private_key,
      this.public_key,
      this.profileUrl,
      this.isActive,
      this.createdAt,
      this.updatedAt,
      this.isDeleted}) {
    _setDefaultValues();
  }
  User.withFields(
      this.firstName,
      this.lastName,
      this.email,
      this.password,
      this.private_key,
      this.public_key,
      this.profileUrl,
      this.isActive,
      this.createdAt,
      this.updatedAt,
      this.isDeleted) {
    _setDefaultValues();
  }
  User.withId(
      this.id,
      this.firstName,
      this.lastName,
      this.email,
      this.password,
      this.private_key,
      this.public_key,
      this.profileUrl,
      this.isActive,
      this.createdAt,
      this.updatedAt,
      this.isDeleted) {
    _setDefaultValues();
  }
  User.fromMap(Map<String, dynamic> o) {
    _setDefaultValues();
    id = o['id'] as int;
    if (o['firstName'] != null) firstName = o['firstName'] as String;
    if (o['lastName'] != null) lastName = o['lastName'] as String;
    if (o['email'] != null) email = o['email'] as String;
    if (o['password'] != null) password = o['password'] as String;
    if (o['private_key'] != null) private_key = o['private_key'] as String;
    if (o['public_key'] != null) public_key = o['public_key'] as String;
    if (o['profileUrl'] != null) profileUrl = o['profileUrl'] as String;
    if (o['isActive'] != null)
      isActive = o['isActive'] == 1 || o['isActive'] == true;
    if (o['createdAt'] != null) createdAt = o['createdAt'] as int;
    if (o['updatedAt'] != null) updatedAt = o['updatedAt'] as int;
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (User)
  int id;
  String firstName;
  String lastName;
  String email;
  String password;
  String private_key;
  String public_key;
  String profileUrl;
  bool isActive;
  int createdAt;
  int updatedAt;
  bool isDeleted;

  BoolResult saveResult;
  // end FIELDS (User)

  static const bool _softDeleteActivated = true;
  UserManager __mnUser;

  UserManager get _mnUser {
    return __mnUser = __mnUser ?? UserManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (firstName != null) {
      map['firstName'] = firstName;
    }

    if (lastName != null) {
      map['lastName'] = lastName;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (password != null) {
      map['password'] = password;
    }

    if (private_key != null) {
      map['private_key'] = private_key;
    }

    if (public_key != null) {
      map['public_key'] = public_key;
    }

    if (profileUrl != null) {
      map['profileUrl'] = profileUrl;
    }

    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive ? 1 : 0) : isActive;
    }

    if (createdAt != null) {
      map['createdAt'] = createdAt;
    }

    if (updatedAt != null) {
      map['updatedAt'] = updatedAt;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = <String, dynamic>{};
    if (id != null) {
      map['id'] = id;
    }
    if (firstName != null) {
      map['firstName'] = firstName;
    }

    if (lastName != null) {
      map['lastName'] = lastName;
    }

    if (email != null) {
      map['email'] = email;
    }

    if (password != null) {
      map['password'] = password;
    }

    if (private_key != null) {
      map['private_key'] = private_key;
    }

    if (public_key != null) {
      map['public_key'] = public_key;
    }

    if (profileUrl != null) {
      map['profileUrl'] = profileUrl;
    }

    if (isActive != null) {
      map['isActive'] = forQuery ? (isActive ? 1 : 0) : isActive;
    }

    if (createdAt != null) {
      map['createdAt'] = createdAt;
    }

    if (updatedAt != null) {
      map['updatedAt'] = updatedAt;
    }

    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds(false, true));
  }

  List<dynamic> toArgs() {
    return [
      id,
      firstName,
      lastName,
      email,
      password,
      private_key,
      public_key,
      profileUrl,
      isActive,
      createdAt,
      updatedAt,
      isDeleted
    ];
  }

  static Future<List<User>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR User.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<User>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <User>[];
    try {
      objList = list
          .map((user) => User.fromMap(user as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR User.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  /*
    /// REMOVED AFTER v1.2.1+14 
    static Future<List<User>> fromObjectList(Future<List<dynamic>> o) async {
      final data = await o;
      return await User.fromMapList(data);
    } 
    */

  static Future<List<User>> fromMapList(List<dynamic> data,
      {bool preload = false, List<String> preloadFields}) async {
    final List<User> objList = <User>[];
    for (final map in data) {
      final obj = User.fromMap(map as Map<String, dynamic>);

      objList.add(obj);
    }
    return objList;
  }

  /// returns User by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns User if exist, otherwise returns null
  Future<User> getById(int id) async {
    if (id == null) {
      return null;
    }
    User obj;
    final data = await _mnUser.getById(id);
    if (data.length != 0) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (User) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnUser.insert(this);
    } else {
      id = await _upsert();
    }

    return id;
  }

  /// saveAs User. Returns a new Primary Key value of User

  /// <returns>Returns a new Primary Key value of User
  Future<int> saveAs() async {
    id = null;

    return save();
  }

  /// saveAll method saves the sent List<User> as a bulk in one transaction
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<User> users) async {
    final results = _mnUser.saveAll(
        'INSERT OR REPLACE INTO user (id,  firstName, lastName, email, password, private_key, public_key, profileUrl, isActive, createdAt, updatedAt,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
        users);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      if (await _mnUser.rawInsert(
              'INSERT OR REPLACE INTO user (id,  firstName, lastName, email, password, private_key, public_key, profileUrl, isActive, createdAt, updatedAt,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
              [
                id,
                firstName,
                lastName,
                email,
                password,
                private_key,
                public_key,
                profileUrl,
                isActive,
                createdAt,
                updatedAt,
                isDeleted
              ]) ==
          1) {
        saveResult = BoolResult(
            success: true, successMessage: 'User id=$id updated successfuly');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'User id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'User Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<<User>> as a bulk in one transaction.
  ///
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  ///
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<User> users) async {
    final results = await _mnUser.rawInsertAll(
        'INSERT OR REPLACE INTO user (id,  firstName, lastName, email, password, private_key, public_key, profileUrl, isActive, createdAt, updatedAt,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?,?)',
        users);
    return results;
  }

  /// Deletes User

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete User invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted) {
      return _mnUser
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover User>

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    print('SQFENTITIY: recover User invoked (id=$id)');
    {
      return _mnUser.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  //private UserFilterBuilder _Select;
  UserFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return UserFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  UserFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return UserFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isActive = isActive ?? true;
    isDeleted = isDeleted ?? false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
      you must define customCode property of your SqfEntityTable constant for ex:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODES
}
// endregion user

// region UserField
class UserField extends SearchCriteria {
  UserField(this.userFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  UserFilterBuilder userFB;

  UserField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  UserFilterBuilder equals(dynamic pValue) {
    param.expression = '=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.EQuals,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.NotEQuals,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder equalsOrNull(dynamic pValue) {
    param.expression = '=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.EQualsOrNull,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder isNull() {
    userFB._addedBlocks = setCriteria(
        0,
        userFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
          userFB._addedBlocks.retVal;
      userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      userFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          userFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks);
      _waitingNot = '';
      userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
          userFB._addedBlocks.retVal;
    }
    return userFB;
  }

  UserFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      userFB._addedBlocks = setCriteria(
          pFirst,
          userFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          userFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        userFB._addedBlocks = setCriteria(pFirst, userFB.parameters, param,
            SqlSyntax.LessThan, userFB._addedBlocks);
      } else {
        userFB._addedBlocks = setCriteria(pFirst, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        userFB._addedBlocks = setCriteria(pLast, userFB.parameters, param,
            SqlSyntax.GreaterThan, userFB._addedBlocks);
      } else {
        userFB._addedBlocks = setCriteria(pLast, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks);
      }
    }
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.GreaterThan,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param, SqlSyntax.LessThan,
            userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.LessThan,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    userFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, userFB.parameters, param,
            SqlSyntax.LessThanOrEquals, userFB._addedBlocks)
        : setCriteria(pValue, userFB.parameters, param, SqlSyntax.GreaterThan,
            userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }

  UserFilterBuilder inValues(dynamic pValue) {
    userFB._addedBlocks = setCriteria(
        pValue,
        userFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        userFB._addedBlocks);
    _waitingNot = '';
    userFB._addedBlocks.needEndBlock[userFB._blockIndex] =
        userFB._addedBlocks.retVal;
    return userFB;
  }
}
// endregion UserField

// region UserFilterBuilder
class UserFilterBuilder extends SearchCriteria {
  UserFilterBuilder(User obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = <DbParameter>[];
    orderByList = <String>[];
    groupByList = <String>[];
    _addedBlocks = AddedBlocks(<bool>[], <bool>[]);
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  User _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  UserFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  UserFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  UserFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  UserFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  UserFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  UserFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  UserFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  UserFilterBuilder orderBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserFilterBuilder orderByDesc(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  UserFilterBuilder groupBy(dynamic argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  UserField setField(UserField field, String colName, DbType dbtype) {
    return UserField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  UserField _id;
  UserField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  UserField _firstName;
  UserField get firstName {
    return _firstName = setField(_firstName, 'firstName', DbType.text);
  }

  UserField _lastName;
  UserField get lastName {
    return _lastName = setField(_lastName, 'lastName', DbType.text);
  }

  UserField _email;
  UserField get email {
    return _email = setField(_email, 'email', DbType.text);
  }

  UserField _password;
  UserField get password {
    return _password = setField(_password, 'password', DbType.text);
  }

  UserField _private_key;
  UserField get private_key {
    return _private_key = setField(_private_key, 'private_key', DbType.text);
  }

  UserField _public_key;
  UserField get public_key {
    return _public_key = setField(_public_key, 'public_key', DbType.text);
  }

  UserField _profileUrl;
  UserField get profileUrl {
    return _profileUrl = setField(_profileUrl, 'profileUrl', DbType.text);
  }

  UserField _isActive;
  UserField get isActive {
    return _isActive = setField(_isActive, 'isActive', DbType.bool);
  }

  UserField _createdAt;
  UserField get createdAt {
    return _createdAt = setField(_createdAt, 'createdAt', DbType.integer);
  }

  UserField _updatedAt;
  UserField get updatedAt {
    return _updatedAt = setField(_updatedAt, 'updatedAt', DbType.integer);
  }

  UserField _isDeleted;
  UserField get isDeleted {
    return _isDeleted = setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (User._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<User> bulk by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (User._softDeleteActivated && !hardDelete) {
      r = await _obj._mnUser.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnUser.delete(qparams);
    }
    return r;
  }

  Future<BoolResult> recover() async {
    _getIsDeleted = true;
    _buildParameters();
    print('SQFENTITIY: recover User bulk invoked');
    return _obj._mnUser.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from user ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnUser.updateBatch(qparams, values);
  }

  /// This method always returns UserObj if exist, otherwise returns null
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<User>
  Future<User> toSingle(
      {bool preload = false, List<String> preloadFields}) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnUser.toList(qparams);
    final data = await objFuture;
    User obj;
    if (data.isNotEmpty) {
      obj = User.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback Function(int c) userCount]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final usersFuture = await _obj._mnUser.toList(qparams);
    final int count = usersFuture[0]['CNT'] as int;
    if (userCount != null) {
      userCount(count);
    }
    return count;
  }

  /// This method always returns List<User>.
  ///
  /// Set preload to true if you want to load all fields related to child or parent
  ///
  /// You can send certain field names with preloadFields parameter for preloading. For ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])
  ///
  /// <returns>List<User>
  Future<List<User>> toList(
      {bool preload = false, List<String> preloadFields}) async {
    final data = await toMapList();
    final List<User> usersData = await User.fromMapList(data, preload: preload);
    return usersData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds(false, true));
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnUser.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<User>>
  Future<List<DropdownMenuItem<User>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<User>> o)
          dropDownMenu]) async {
    _buildParameters();
    final usersFuture = _obj._mnUser.toList(qparams);

    final data = await usersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<User>> items = []..add(DropdownMenuItem(
        value: User(),
        child: Text('Select User'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: User.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback Function(List<DropdownMenuItem<int>> o)
          dropDownMenu]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final usersFuture = _obj._mnUser.toList(qparams);

    final data = await usersFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = []..add(DropdownMenuItem(
        value: 0,
        child: Text('Select User'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnUser.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback Function(List<dynamic> o) listObject]) async {
    _buildParameters();

    final objectFuture = _obj._mnUser.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await User.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o) listString]) async {
    _buildParameters();

    final objectFuture = _obj._mnUser.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserFilterBuilder

// region UserFields
class UserFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fFirstName;
  static TableField get firstName {
    return _fFirstName = _fFirstName ??
        SqlSyntax.setField(_fFirstName, 'firstName', DbType.text);
  }

  static TableField _fLastName;
  static TableField get lastName {
    return _fLastName =
        _fLastName ?? SqlSyntax.setField(_fLastName, 'lastName', DbType.text);
  }

  static TableField _fEmail;
  static TableField get email {
    return _fEmail =
        _fEmail ?? SqlSyntax.setField(_fEmail, 'email', DbType.text);
  }

  static TableField _fPassword;
  static TableField get password {
    return _fPassword =
        _fPassword ?? SqlSyntax.setField(_fPassword, 'password', DbType.text);
  }

  static TableField _fPrivate_key;
  static TableField get private_key {
    return _fPrivate_key = _fPrivate_key ??
        SqlSyntax.setField(_fPrivate_key, 'private_key', DbType.text);
  }

  static TableField _fPublic_key;
  static TableField get public_key {
    return _fPublic_key = _fPublic_key ??
        SqlSyntax.setField(_fPublic_key, 'public_key', DbType.text);
  }

  static TableField _fProfileUrl;
  static TableField get profileUrl {
    return _fProfileUrl = _fProfileUrl ??
        SqlSyntax.setField(_fProfileUrl, 'profileUrl', DbType.text);
  }

  static TableField _fIsActive;
  static TableField get isActive {
    return _fIsActive =
        _fIsActive ?? SqlSyntax.setField(_fIsActive, 'isActive', DbType.bool);
  }

  static TableField _fCreatedAt;
  static TableField get createdAt {
    return _fCreatedAt = _fCreatedAt ??
        SqlSyntax.setField(_fCreatedAt, 'createdAt', DbType.integer);
  }

  static TableField _fUpdatedAt;
  static TableField get updatedAt {
    return _fUpdatedAt = _fUpdatedAt ??
        SqlSyntax.setField(_fUpdatedAt, 'updatedAt', DbType.integer);
  }

  static TableField _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion UserFields

//region UserManager
class UserManager extends SqfEntityProvider {
  UserManager() : super(AgreementModel(), tableName: _tableName, colId: _colId);
  static String _tableName = 'user';
  static String _colId = 'id';
}

//endregion UserManager
class AgreementModelSequenceManager extends SqfEntityProvider {
  AgreementModelSequenceManager() : super(AgreementModel());
}
// END OF ENTITIES
